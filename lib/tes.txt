-- =============================================================================
-- VerifiTrust Database Schema - Supabase PostgreSQL
--
-- This script creates the necessary tables for the VerifiTrust Proof-of-Concept,
-- including user accounts (citizens), aid providers, issuers, aid programs,
-- verifiable credentials, and application records.
--
-- Assumes Supabase Auth is enabled, creating the 'auth.users' table.
-- =============================================================================

-- Drop tables if they exist (Useful for development/resetting, remove in production migration)
-- Be careful with production data!
-- DROP TABLE IF EXISTS public.applications CASCADE;
-- DROP TABLE IF EXISTS public.verifiable_credentials CASCADE;
-- DROP TABLE IF EXISTS public.provider_users CASCADE;
-- DROP TABLE IF EXISTS public.users CASCADE;
-- DROP TABLE IF EXISTS public.issuers CASCADE;
-- DROP TABLE IF EXISTS public.aid_programs CASCADE;


-- ==============================================
-- Table: public.issuers
-- Description: Stores information about the entities issuing credentials
--              (e.g., the VerifiTrust Aid Agency).
-- ==============================================
CREATE TABLE public.issuers (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(), -- Unique identifier for the issuer
    created_at timestamptz NOT NULL DEFAULT now(),
    name text NOT NULL,
    cheqd_did text NOT NULL UNIQUE, -- The DID of the issuer on the Cheqd network
    cheqd_signing_key_id text NOT NULL, -- The ID of the key used by this issuer for signing
    type text NULL -- Optional: categorize issuer type (e.g., 'agency', 'government')
);

-- Adding indexes for frequently queried columns
CREATE INDEX issuers_cheqd_did_idx ON public.issuers (cheqd_did);


-- ==============================================
-- Table: public.aid_programs
-- Description: Stores information about the available aid programs.
-- ==============================================
CREATE TABLE public.aid_programs (
    program_id text NOT NULL PRIMARY KEY, -- Unique identifier for the program (as used in logic)
    created_at timestamptz NOT NULL DEFAULT now(),
    name text NOT NULL,
    description text NULL,
    required_tags jsonb NOT NULL DEFAULT '[]'::jsonb -- JSON array of eligibility tag strings
);


-- ==============================================
-- Table: public.users
-- Description: Stores application-specific data for each registered user (citizen).
--              Links directly to the Supabase auth.users table.
-- ==============================================
CREATE TABLE public.users (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users (id) ON DELETE CASCADE, -- Links to Supabase Auth user, cascade delete if auth user is removed
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NULL,
    email text NOT NULL UNIQUE, -- Redundant with auth.users but useful
    cheqd_did text NOT NULL UNIQUE, -- The custodial DID for the user
    full_name text NULL,
    phone_number text NULL,
    identity_document_number text NULL,
    residence_address text NULL,
    monthly_income_estimate text NULL, -- Stored as text for simplicity as per doc (e.g., "< 1jt")
    is_orphan boolean NULL, -- Demo flag
    has_disability boolean NULL, -- Demo flag
    data_submitted_at timestamptz NULL, -- Timestamp when the user submitted profile data
    vc_issued_at timestamptz NULL -- Timestamp when eligibility VC was issued
);

-- Adding indexes for frequently queried columns
CREATE INDEX users_cheqd_did_idx ON public.users (cheqd_did);


-- ==============================================
-- Table: public.provider_users
-- Description: Stores specific data for users who act as aid providers/verifiers.
--              Links directly to the Supabase auth.users table.
-- ==============================================
CREATE TABLE public.provider_users (
    id uuid NOT NULL PRIMARY KEY REFERENCES auth.users (id) ON DELETE CASCADE, -- Links to Supabase Auth user, cascade delete if auth user is removed
    created_at timestamptz NOT NULL DEFAULT now(),
    updated_at timestamptz NULL,
    name text NOT NULL, -- Nama individu atau organisasi provider
    agency_id uuid NULL REFERENCES public.issuers (id), -- Optional: foreign key ke tabel issuers jika provider terkait dengan issuer tertentu
    role_within_agency text NULL, -- Optional: peran spesifik provider dalam agensi (e.g., 'Verifier', 'Approver')
    permissions jsonb NOT NULL DEFAULT '{}'::jsonb, -- Flexible JSONB field for specific permissions/capabilities
    is_active boolean NOT NULL DEFAULT true -- Flag untuk mengaktifkan/menonaktifkan akun provider
);

-- Adding indexes for frequently queried columns
CREATE INDEX provider_users_agency_id_idx ON public.provider_users (agency_id);
CREATE INDEX provider_users_is_active_idx ON public.provider_users (is_active);


-- ==============================================
-- Table: public.verifiable_credentials
-- Description: Stores the issued Verifiable Credentials (VCs).
--              For the PoC, primarily the eligibility VC.
-- ==============================================
CREATE TABLE public.verifiable_credentials (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(), -- Unique identifier for the VC record
    created_at timestamptz NOT NULL DEFAULT now(),
    user_id uuid NOT NULL REFERENCES public.users (id) ON DELETE CASCADE, -- The user (holder) this VC belongs to
    issuer_id uuid NOT NULL REFERENCES public.issuers (id), -- The issuer of this VC
    type text NOT NULL, -- The type of VC (e.g., "VerifiTrustEligibility")
    vc_json jsonb NOT NULL, -- The full signed VC JSON object
    issued_at timestamptz NOT NULL, -- Timestamp the VC was issued
    revoked_at timestamptz NULL -- Timestamp if the VC was revoked (optional for PoC)
);

-- Adding indexes
CREATE INDEX verifiable_credentials_user_id_idx ON public.verifiable_credentials (user_id);
CREATE INDEX verifiable_credentials_issuer_id_idx ON public.verifiable_credentials (issuer_id);


-- ==============================================
-- Table: public.applications
-- Description: Records user applications to specific aid programs using their VCs.
--              Includes foreign keys to track which provider user performed actions.
-- ==============================================
CREATE TABLE public.applications (
    id uuid NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(), -- Unique identifier for the application record
    created_at timestamptz NOT NULL DEFAULT now(),
    user_id uuid NOT NULL REFERENCES public.users (id) ON DELETE CASCADE, -- The user who applied
    program_id text NOT NULL REFERENCES public.aid_programs (program_id), -- The program applied for
    credential_id uuid NOT NULL REFERENCES public.verifiable_credentials (id), -- The specific VC used for this application

    -- New foreign keys to link provider actions to a specific provider_user
    verified_by_provider_user_id uuid NULL REFERENCES public.provider_users (id) ON DELETE SET NULL, -- Provider who last verified this application
    approved_by_provider_user_id uuid NULL REFERENCES public.provider_users (id) ON DELETE SET NULL, -- Provider who last approved/rejected this application

    application_status text NOT NULL DEFAULT 'pending_verification', -- Status: 'pending_verification', 'verification_verified', 'verification_failed', 'approved', 'rejected'
    status_updated_at timestamptz NOT NULL DEFAULT now(), -- Timestamp of the last status update
    verification_notes text NULL, -- Optional notes from the verification process

    -- Constraint: Ensure a user can only have one application per program (for simplicity in PoC)
    UNIQUE (user_id, program_id)
);

-- Adding indexes
CREATE INDEX applications_user_id_idx ON public.applications (user_id);
CREATE INDEX applications_program_id_idx ON public.applications (program_id);
CREATE INDEX applications_credential_id_idx ON public.applications (credential_id);
CREATE INDEX applications_status_idx ON public.applications (application_status);
CREATE INDEX applications_verified_by_idx ON public.applications (verified_by_provider_user_id); -- Index for the new FK
CREATE INDEX applications_approved_by_idx ON public.applications (approved_by_provider_user_id); -- Index for the new FK


-- ==============================================
-- Row Level Security (RLS) - IMPORTANT NOTE FOR PRODUCTION
-- Supabase tables have RLS enabled by default.
-- For a hackathon POC, you MIGHT disable RLS on these tables temporarily
-- for faster development, but be AWARE this makes the database INSECURE.
-- For production, you MUST implement proper RLS policies tailored to
-- citizen users and provider users.
--
-- Example (Disable RLS - ONLY FOR HACKATHON/DEV):
-- ALTER TABLE public.issuers DISABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.aid_programs DISABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.users DISABLE ROW LEVEL SECURITY; -- Be extra cautious disabling RLS on user data
-- ALTER TABLE public.provider_users DISABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.verifiable_credentials DISABLE ROW LEVEL SECURITY;
-- ALTER TABLE public.applications DISABLE ROW LEVEL SECURITY;
--
-- Example (Basic RLS Policy for users table - for authenticated users):
-- CREATE POLICY "Enable read access for authenticated users" ON public.users FOR SELECT USING (auth.role() = 'authenticated' AND id = auth.uid()); -- User can only see their own record
-- CREATE POLICY "Enable insert for authenticated users" ON public.users FOR INSERT WITH CHECK (auth.role() = 'authenticated' AND id = auth.uid()); -- User can only create their own record
-- -- More granular policies needed for other tables (providers accessing applications, etc.)
-- ==============================================

-- Optional: Insert initial data (Commented out - uncomment and fill in details as needed)

-- INSERT INTO public.issuers (name, cheqd_did, cheqd_signing_key_id, type)
-- VALUES ('VerifiTrust Aid Agency', 'did:cheqd:testnet:YOUR_ISSUER_DID_HERE', 'YOUR_ISSUER_KEY_ID_HERE', 'agency');

-- INSERT INTO public.aid_programs (program_id, name, description, required_tags)
-- VALUES ('bansos-income-support-nairobi', 'Bantuan Pendapatan Rendah Nairobi', 'Program bantuan untuk keluarga berpendapatan rendah di Nairobi.', '["income_level_low", "residence_verified"]'::jsonb);
-- INSERT INTO public.aid_programs (program_id, name, description, required_tags)
-- VALUES ('bansos-disability-support', 'Bantuan Dukungan Disabilitas', 'Program bantuan untuk individu dengan disabilitas.', '["has_disability"]'::jsonb);
-- -- Add more programs as needed

-- INSERT INTO public.provider_users (id, name, agency_id, role_within_agency, permissions, is_active)
-- VALUES (
--     'SUPABASE_AUTH_USER_ID_FOR_PROVIDER_HERE', -- Ganti dengan UUID pengguna dari auth.users untuk akun provider
--     'Admin Verifikator Utama',
--     (SELECT id FROM public.issuers WHERE name = 'VerifiTrust Aid Agency'), -- Mengambil agency_id jika issuer sudah diinsert
--     'Lead Verifier',
--     '{"can_verify": true, "can_approve": true, "can_manage_users": false}'::jsonb, -- Contoh permissions
--     TRUE
-- );
-- -- Add more provider users as needed